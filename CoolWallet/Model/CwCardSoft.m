//
//  CwCardSoft.m
//  CwTest
//
//  Created by CP Hsiao on 2014/12/23.
//  Copyright (c) 2014å¹´ CP Hsiao. All rights reserved.
//

#import "CwCardSoft.h"
#import "CwCard.h"

typedef NS_ENUM (NSInteger, LoaderCmdId) {
    //SE Commands
    LoaderCmdIdEcho         = 0xBE,
    LoaderCmdIdGetSn        = 0xC0,
    LoaderCmdIdGetVersion   = 0xC1,
    LoaderCmdIdGetStatus    = 0xC2,
    //LoaderCmdIdGetAuthChlng = 0xC3,
    //LoaderCmdIdGetAuthKeyId = 0xC4,
    //LoaderCmdIdChangeLoaderKey = 0xC5,
    LoaderCmdIdBackToSLE97Loader = 0xC6,
    LoaderCmdIdLoadingBegin = 0xC7,
    LoaderCmdIdWriteRecord  = 0xC8,
    LoaderCmdIdVerifyMac    = 0xC9
};

typedef NS_ENUM (NSInteger, CwCmdId) {
    //SE Commands
    CwCmdIdGetModeState     = 0x10,
    CwCmdIdGetFwVersion     = 0x11,
    CwCmdIdGetUid           = 0x12,
    CwCmdIdGetError         = 0x13,
    
    //Init Commands
    CwCmdIdInitSetData      = 0xA0,
    CwCmdIdInitConfirm      = 0xA2,
    CwCmdIdInitVmkChlng     = 0xA3,
    CwCmdIdInitBackInit     = 0xA4,
    
    //Authentication Commands
    CwCmdIdPinChlng         = 0x20,
    CwCmdIdPinAuth          = 0x21,
    CwCmdIdPinChange        = 0x22,
    CwCmdIdPinLogout        = 0x23,
    
    //Binding Commands
    CwCmdIdBindRegInit      = 0xD0,
    CwCmdIdBindRegChlng     = 0xD1,
    CwCmdIdBindRegFinish    = 0xD2,
    CwCmdIdBindRegInfo      = 0xD3,
    CwCmdIdBindRegApprove   = 0xD4,
    CwCmdIdBindRegRemove    = 0xD5,
    CwCmdIdBindLoginChlng   = 0xD6,
    CwCmdIdBindLogin        = 0xD7,
    CwCmdIdBindLogout       = 0xD8,
    CwCmdIdBindFindHostId   = 0xD9,
    CwCmdIdBindBackNoHost   = 0xDA,
    
    //Perso Commands
    CwCmdIdPersoSetData       = 0x30,
    CwCmdIdPersoConfirm       = 0x32,
    CwCmdIdPersoBackPerso     = 0x33,
    
    //CW Setting Commands
    CwCmdIdSetCurrRate      = 0x40,
    CwCmdIdGetCurrRate      = 0x41,
    CwCmdIdGetCardName      = 0x42,
    CwCmdIdSetCardName      = 0x43,
    CwCmdIdGetPerso         = 0x44,
    CwCmdIdSetPerso         = 0x45,
    CwCmdIdGetCardId        = 0x46,
    
    //HD Wallet Commands
    CwCmdIdHdwInitWallet            = 0xB0,
    CwCmdIdHdwInitWalletGen         = 0xB1,
    CwCmdIdHdwQueryWalletInfo       = 0xB2,
    CwCmdIdHdwSetWalletInfo         = 0xB3,
    CwCmdIdHdwCreateAccount         = 0xB4,
    CwCmdIdHdwQueryAccountInfo      = 0xB5,
    CwCmdIdHdwSetAccountInfo        = 0xB6,
    CwCmdIdHdwGetNextAddress        = 0xB7,
    CwCmdIdHdwPrepTrxSign           = 0xB8,
    CwCmdIdHdwInitWalletGenConfirm  = 0xB9,
    CwCmdIdHdwQueryAccountKeyInfo   = 0xBA,
    
    //Transaction Commands
    CwCmdIdTrxStatus        = 0x80,
    CwCmdIdTrxBegin         = 0x72,
    CwCmdIdTrxVerifyOtp     = 0x73,
    CwCmdIdTrxSign          = 0x74,
    CwCmdIdTrxFinish        = 0x76,
    CwCmdIdTrxGetAddr       = 0x79,
    
    //Exchange Site Commands
    CwCmdIdExRegStatus      = 0xF0,
    CwCmdIdExGetOtp         = 0xF4,
    CwCmdIdExSessionInit    = 0xF5,
    CwCmdIdExSessionEstab   = 0xF6,
    CwCmdIdExSessionLogout  = 0xF7,
    CwCmdIdExBlockInfo      = 0xF8,
    CwCmdIdExBlockBtc       = 0xF9,
    CwCmdIdExBlockCancel    = 0xFA,
    CwCmdIdExTrxSignLogin   = 0xFB,
    CwCmdIdExTrxSignPrepare = 0xFC,
    CwCmdIdExTrxSignLogout  = 0xFD,
    
    //FirmwareUpload Commmands
    CwCmdIdBackToLoader     = 0x78,
    CwCmdIdBackToSLE97Loader = 0x77,
    
    //MCU Commands
    CwCmdIdMcuResetSe       = 0x60,
    CwCmdIdMcuQueryBatGague = 0x61,
    CwCmdIdMcuSetAccount    = 0x62,
};

typedef NS_ENUM (NSInteger, CwHdwInfo) {
    CwHdwInfoStatus             = 0x00,
    CwHdwInfoName               = 0x01,
    CwHdwInfoAccountPointer     = 0x02
};

typedef NS_ENUM (NSInteger, CwHdwAccountInfo) {
    CwHdwAccountInfoName        = 0x00,
    CwHdwAccountInfoBalance     = 0x01,
    CwHdwAccountInfoExtKeyPtr   = 0x02,
    CwHdwAccountInfoIntKeyPtr   = 0x03,
    CwHdwAccountInfoBlockAmount = 0x04
};

typedef NS_ENUM (NSInteger, CwHdwAccountKeyInfo) {
    CwHdwAccountKeyInfoAddress  = 0x00,
    CwHdwAccountKeyInfoPubKey   = 0x01
};

/*
typedef NS_ENUM (NSInteger, CwAddressKeyChain) {
    CwAddressKeyChainExternal = 0x00,
    CwAddressKeyChainInternal = 0x01
};
*/

@interface CwCardSoft()

@end

@implementation CwCardSoft

#pragma makr - SW CW Internal properties
#pragma mark - SW CW - Basic Info
NSInteger mode;
NSInteger state;
NSString *fwVersion;
NSString *uid;
NSString *cardId;

#pragma mark - SW CW - Host Info
NSMutableDictionary *cwHosts;

#pragma mark - SW CW - Securityp Policy
Byte securityPolicy[4];

#pragma mark - SW CW - Card Info
Byte cardName[32];
Byte currRate[5];

#pragma mark - SW CW - HDW Info
NSInteger hdwStatus;
Byte hdwName[32];
NSInteger hdwAcccountPointer;

Byte    accName[5][32];
int64_t accBalance[5];
int64_t accBlocAmount[5];
NSInteger accExtKeyPtr[5];
NSInteger accIntKeyPtr[5];

NSArray *addresses;

/* test addresses (generated by my trezor
 m/44'/0'/0'/0/0
 
 /0 17sfSavpd8PQiCzCbFvTEesJggxjou6Upk
 /1 1NrrTzsTjbMxgjJT2sLRuDSAhkxpxqMYEP
 /2 1A4si6NYYd49vn3x5UZBYJ8z5fLPGwPPvG
 /3 16YqRges1zMMf2Ey5DQkLA6oSZchY9BTMR
 /4 1FsiDQqUuFkbTcd4nfFn2wSfzzp4ngrfys
 /5 1GRE9Mqunm4tQrVi3vkZJVHPoTfeBLpLh
 /6 13jHaUswio2j5DCyPfEA46S1DpKUKDDGAT
 /7 1H8YgoiKwMjP3B5t9pHgpKLPUCptmzyecs
 /8 1588iYaAN4CD9jDJbn1TUmwnsHL7ZDYahQ
 /9 12ZT68cNakKMeBM7xJXRSRdWpRp6MXsnFf
 /10 1J9e7LzV976KQ5nMbGGKqa22ym71o1TMp8
 /11 1N3BuQ4ovZfhhzEe794wVrXX5Sv3pJ9ug2
 /12 1CdV19C2PPKySGG9bueoGNtEe55rqT5A2u
 /13 1KctgNgsw3X5Gkb7xvLXC8bfbsnm5tsfUU
 /14 17YPMsf25qcL2GEGpyaggYHPHDwmgwvoVs
 /15 1BXJQvisv3frNHWHRqEAy88UqSENZvR3XZ
 /16 1PbXgkj75Gp4agCpeTe5LenVDiK8f5kpMU
 /17 1QN5cHfb1eQMGtbcqrT6yXqmccqX6JbmS
 /18 17X9Hy2gYarsco8CtdF3414vRpuQZcu6Ww
 /19 12ENefsAYUKuD37BRGdAUTqKxPAxHqxR6d
*/

-(id) init {
    if (self = [super init]) {
        mode=CwCardModeDisconn;
        state=0;
        fwVersion = @"FW1.0";
        uid = @"UID1.0";
        cardId = @"CARDID1234";
        
        cwHosts = [[NSMutableDictionary alloc] init];
        
        memset(securityPolicy, 0x00, sizeof(securityPolicy));
        memset(currRate, 0x00, sizeof(currRate));
        
        memset(cardName, 0x00, sizeof(cardName));
        
        hdwStatus = CwHdwStatusInactive;
        memset(hdwName, 0x00, sizeof(hdwName));
        hdwAcccountPointer = 0;
        
        for (int i=0; i<5; i++) {
            memset(accName[i], 0x00, 32);
            accBalance[i]=0;
            accBlocAmount[i]=0;
            accExtKeyPtr[i]=0;
            accIntKeyPtr[i]=0;
        }
    }
    return self;
}


-(NSString *) cmdIdToString: (NSInteger) cmdId
{
    NSString *str;
    
    switch (cmdId) {
        case CwCmdIdGetModeState:       str=@"[GetModeState]"; break;
        case CwCmdIdGetFwVersion:       str=@"[GetFwVersion]"; break;
        case CwCmdIdGetUid:             str=@"[GetUid]"; break;
        case CwCmdIdGetError:           str=@"[GetError]"; break;
            
        case CwCmdIdInitSetData:        str=@"[InitSetData]"; break;
        case CwCmdIdInitConfirm:        str=@"[InitConfirm]"; break;
        case CwCmdIdInitVmkChlng:       str=@"[InitVmkChlng]"; break;
        case CwCmdIdInitBackInit:       str=@"[InitBackInit]"; break;
            
        case CwCmdIdPinChlng:           str=@"[PinChlng]"; break;
        case CwCmdIdPinAuth:            str=@"[PinAuth]"; break;
        case CwCmdIdPinChange:          str=@"[PinChange]"; break;
        case CwCmdIdPinLogout:          str=@"[PinLogout]"; break;
            
        case CwCmdIdBindRegInit:        str=@"[BindRegInit]"; break;
        case CwCmdIdBindRegChlng:       str=@"[BindRegChlng]"; break;
        case CwCmdIdBindRegFinish:      str=@"[BindRegFinish]"; break;
        case CwCmdIdBindRegInfo:        str=@"[BindRegInfo]"; break;
        case CwCmdIdBindRegApprove:     str=@"[BindRegApprove]"; break;
        case CwCmdIdBindRegRemove:      str=@"[BindRegRemove]"; break;
        case CwCmdIdBindLoginChlng:     str=@"[BindLoginChlng]"; break;
        case CwCmdIdBindLogin:          str=@"[BindLogin]"; break;
        case CwCmdIdBindLogout:         str=@"[BindLogout]"; break;
        case CwCmdIdBindFindHostId:     str=@"[BindFindHostId]"; break;
        case CwCmdIdBindBackNoHost:     str=@"[BindBackNoHost]"; break;
            
        case CwCmdIdPersoSetData:       str=@"[PersoSetData]"; break;
        case CwCmdIdPersoConfirm:       str=@"[PersoConfirm]"; break;
        case CwCmdIdPersoBackPerso:     str=@"[PersoBackPerso]"; break;
            
        case CwCmdIdSetCurrRate:        str=@"[SetCurrRate]"; break;
        case CwCmdIdGetCurrRate:        str=@"[GetCurrRate]"; break;
        case CwCmdIdGetCardName:        str=@"[GetCardName]"; break;
        case CwCmdIdSetCardName:        str=@"[SetCardName]"; break;
        case CwCmdIdGetPerso:           str=@"[GetPerso]"; break;
        case CwCmdIdSetPerso:           str=@"[SetPerso]"; break;
        case CwCmdIdGetCardId:          str=@"[GetCardId]"; break;
            
        case CwCmdIdHdwInitWallet:      str=@"[HdwInitWallet]"; break;
        case CwCmdIdHdwInitWalletGen:   str=@"[HdwInitWalletGen]"; break;
        case CwCmdIdHdwQueryWalletInfo: str=@"[HdwQueryWalletInfo]"; break;
        case CwCmdIdHdwSetWalletInfo:   str=@"[HdwSetWalletInfo]"; break;
        case CwCmdIdHdwCreateAccount:   str=@"[HdwCreateAccount]"; break;
        case CwCmdIdHdwQueryAccountInfo:str=@"[HdwQueryAccountInfo]"; break;
        case CwCmdIdHdwSetAccountInfo:  str=@"[HdwSetAccountInfo]"; break;
        case CwCmdIdHdwGetNextAddress:  str=@"[HdwGetNextAddress]"; break;
        case CwCmdIdHdwPrepTrxSign:     str=@"[HdwPrepTrxSign]"; break;
        case CwCmdIdHdwInitWalletGenConfirm: str=@"[HdwInitWalletGenConfirm]"; break;
        case CwCmdIdHdwQueryAccountKeyInfo:  str=@"[HdwQueryAccountKeyInfo]"; break;
            
        case CwCmdIdTrxStatus:          str=@"[TrxStatus]"; break;
        case CwCmdIdTrxBegin:           str=@"[TrxBegin]"; break;
        case CwCmdIdTrxVerifyOtp:       str=@"[TrxVerifyOtp]"; break;
        case CwCmdIdTrxSign:            str=@"[TrxSign]"; break;
        case CwCmdIdTrxFinish:          str=@"[TrxFinish]"; break;
        case CwCmdIdTrxGetAddr:         str=@"[TrxGetAddr]"; break;
            
        case CwCmdIdExRegStatus:        str=@"[ExRegStatus]"; break;
        case CwCmdIdExGetOtp:           str=@"[ExGetOtp]"; break;
        case CwCmdIdExSessionInit:      str=@"[ExSessionInit]"; break;
        case CwCmdIdExSessionEstab:     str=@"[ExSessionEstab]"; break;
        case CwCmdIdExSessionLogout:    str=@"[ExSessionLogout]"; break;
        case CwCmdIdExBlockInfo:        str=@"[ExBlockInfo]"; break;
        case CwCmdIdExBlockBtc:         str=@"[ExBlockBtc]"; break;
        case CwCmdIdExBlockCancel:      str=@"[ExBlockCancel]"; break;
        case CwCmdIdExTrxSignLogin:     str=@"[ExTrxSignLogin]"; break;
        case CwCmdIdExTrxSignPrepare:   str=@"[ExTrxSignPrepare]"; break;
        case CwCmdIdExTrxSignLogout:    str=@"[ExTrxSignLogout]"; break;
            
        case CwCmdIdBackToLoader:       str=@"[BackToLoader]"; break;
        case CwCmdIdBackToSLE97Loader:  str=@"[BackToSLE97Loader]"; break;
            
        case CwCmdIdMcuResetSe:         str=@"[McuResetSe]"; break;
        case CwCmdIdMcuQueryBatGague:   str=@"[McuQueryBatGague]"; break;
        case CwCmdIdMcuSetAccount:      str=@"[McuSetAccount]"; break;
            
        default:                        str=@"[UnknownCmdId]"; break;
            
    }
    return str;
}

-(void) processCwCardCommand: (CwCardCommand *)cmd
{
    Byte output[256] = {0x00};
    const unsigned char *tmp;
    int seedLen;
    
    if (cmd==nil)
        return;
    
    NSLog(@"CMD: %@", [self cmdIdToString: cmd.cmdId]);
    
    sleep(0.2);
    
    switch (cmd.cmdId) {
        case CwCmdIdGetModeState:
            //output:
            //mode: 1B
            //state: 1B
            output[0]=mode;
            output[1]=state;
            
            cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:2];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdGetFwVersion:
            //output:
            //version 16B
            cmd.cmdOutput = [fwVersion dataUsingEncoding:NSUTF8StringEncoding];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdGetUid:
            //output:
            //uid 8B
            cmd.cmdOutput = [uid dataUsingEncoding:NSUTF8StringEncoding];
            cmd.cmdResult = 0x9000;
            break;
            //Binding Commands
        case CwCmdIdGetCardId:
            //output:
            //cardId 16B
            cmd.cmdOutput = [cardId dataUsingEncoding:NSUTF8StringEncoding];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdBindRegInit:
            //output:
            //bindRegHandle: 4B
            //bindRegOtp: 6B
            for (int i=0; i<4; i++)
                output[i]=i;
            for (int i=4; i<10; i++)
                output[i]='0'+i;
            
            cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:10];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdBindRegChlng:
            //output:
            //regChlng 16B
            for (int i=0; i<16; i++)
                output[i]=i;
            
            cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:16];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdBindRegFinish:
            //output:
            //hostId: 1B
            //confirm: 1B
            output[0]=0;
            output[1]=0x00; //00 CwHostConfirmStatusConfirmed, 01:CwHostConfirmStatusNotConfirmed
            
            mode = CwCardModeDisconn;
            
            cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:2];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdBindRegInfo:
            //output:
            //bindBindState: 1B (00 empty, 01 registered, 02 confirmed)
            //hostDescription: 128B
            
            if (cmd.cmdP1==0)
                output[0]=0x02;
            else
                output[0]=0x00;
            
            for (int i=1; i<5; i++)
                output[i]='A'+i;
            
            cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:129];
            cmd.cmdResult = 0x9000;

            break;
        case CwCmdIdBindRegApprove:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdBindRegRemove:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdBindLoginChlng:
            //output:
            //loginChlng: 16B
            for (int i=0; i<16; i++)
                output[i]=i;
            
            cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:16];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdBindLogin:
            //output:
            //none
            mode=CwCardModeNormal;
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdBindLogout:
            //output:
            //none
            mode=CwCardModeDisconn;
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdBindFindHostId:
            //output
            //hostId 1B
            //confirm 1B
            output[0]=0;
            output[1]=0x00; //00 CwHostConfirmStatusConfirmed, 01:CwHostConfirmStatusNotConfirmed
            
            cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:2];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdBindBackNoHost:
            //output:
            //none
            mode=CwCardModeNoHost;
            cmd.cmdResult = 0x9000;
            break;
            
            //Perso Commands
        case CwCmdIdPersoSetData:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdPersoConfirm:
            //output:
            //none
            mode=CwCardModeNormal;
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdPersoBackPerso:
            //output:
            //none
            mode=CwCardModePerso;
            cmd.cmdResult = 0x9000;
            break;
            
            //CW Setting Commands
        case CwCmdIdSetCurrRate:
            //output:
            //none
            memcpy(currRate, [cmd.cmdInput bytes], sizeof(currRate));
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdGetCurrRate:
            //output:
            //currRate 5B
            cmd.cmdOutput = [[NSData alloc] initWithBytes:currRate length:sizeof(currRate)];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdGetCardName:
            //output:
            //cardName 32B
            cmd.cmdOutput = [NSData dataWithBytes:cardName length:sizeof(cardName)];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdSetCardName:
            //output:
            //none
            memcpy(cardName, [cmd.cmdInput bytes], sizeof(cardName));
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdGetPerso:
            //output:
            //securePolicy: 4B
            cmd.cmdOutput = [[NSData alloc] initWithBytes:securityPolicy length:sizeof(securityPolicy)];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdSetPerso:
            //output:
            //none
            memcpy(securityPolicy, cmd.cmdInput.bytes, sizeof(securityPolicy));
            cmd.cmdResult = 0x9000;
            break;
            
            //HD Wallet Commands
        case CwCmdIdHdwInitWallet:
            //output:
            //none
            hdwStatus = CwHdwStatusActive;
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdHdwInitWalletGen:
            //output:
            //seedString: 12 /18/24B, BCD format
            //activeCode: 4B
            //mac: 32B (seedString || activeCode)
            tmp = [cmd.cmdInput bytes];
            
            seedLen = (int)(tmp[32])/2;
            
            for (int i=0; i<seedLen; i++) //seedString
                output[i]=0x34;
            for (int i=seedLen; i<seedLen+4; i++) //activeCode
                output[i]=i;
            for (int i=seedLen+4; i<seedLen+36; i++) //MAC
                output[i]=i;

            cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:seedLen+36];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdHdwInitWalletGenConfirm:
            //output:
            //none
            hdwStatus = CwHdwStatusActive;
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdHdwQueryWalletInfo:
            //output:
            //infoId 1B (=00/01/02)
            //hwdInfo:
            //  hwdStatus 1B
            //  hwdName 32B
            //  hwdAccountPointer 4B
            NSLog(@"     P1=%ld", cmd.cmdP1);
            switch (cmd.cmdP1) {
                case CwHdwInfoStatus:
                    output[0]=hdwStatus;
                    cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:1];
                    break;
                case CwHdwInfoName:
                    cmd.cmdOutput = [NSData dataWithBytes:hdwName length:sizeof(hdwName)];
                    break;
                case CwHdwInfoAccountPointer:
                    cmd.cmdOutput = [NSData dataWithBytes:&hdwAcccountPointer length:4];
                    break;
            }
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdHdwSetWalletInfo:
            //input:
            //P1: infoId 1B (01 name, 02 accountPointer)
            //hdwInfo:
            //  hwdName 32B
            //  hwdAccountPointer 4B
            //output:
            //none
            
            NSLog(@"     P1=%ld", cmd.cmdP1);
            switch (cmd.cmdP1) {
                case CwHdwInfoName:
                    memcpy(hdwName, [cmd.cmdInput bytes], sizeof(hdwName));
                    break;
                case CwHdwInfoAccountPointer:
                    hdwAcccountPointer = *(int32_t *)[cmd.cmdInput bytes];
                    break;
            }
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdHdwCreateAccount:
            //input:
            //accountId: 4B (little Endian)
            //accountName: 32B
            {
                NSInteger accId = *(int32_t *)[cmd.cmdInput bytes];
                
                memcpy(accName[accId], [cmd.cmdInput bytes]+4, 32);
                accBalance[accId] = 0;
                accExtKeyPtr[accId] = 0;
                accIntKeyPtr[accId] = 0;
                
                //output:
                //none
                hdwAcccountPointer =  accId + 1;
            }
            
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdHdwQueryAccountInfo:
            //input:
            //P1: infoId: 1B (00 name, 01 balance, 02 ext key pointer, 03 int key pointer)
            //accountId 4B
            {
                NSInteger accId = *(int32_t *)[cmd.cmdInput bytes];
            
                //output:
                //accountInfo (00: account name, 01: balance, 02: ext key pointer, 03, int key pointer)
                //  accountName 32B
                //  balance 8B
                //  extKeyPointer   4B
                //  intKeyPointer   4B
                NSLog(@"     P1=%ld", (long)cmd.cmdP1);
                switch (cmd.cmdP1) {
                    case CwHdwAccountInfoName:
                        cmd.cmdOutput = [NSData dataWithBytes:accName[accId] length:32];
                        break;
                    case CwHdwAccountInfoBalance:
                        cmd.cmdOutput = [NSData dataWithBytes: &accBalance[accId] length:8];
                        break;
                    case CwHdwAccountInfoExtKeyPtr:
                        cmd.cmdOutput = [NSData dataWithBytes: &accExtKeyPtr[accId] length:4];
                        break;
                    case CwHdwAccountInfoIntKeyPtr:
                        cmd.cmdOutput = [NSData dataWithBytes: &accIntKeyPtr[accId] length:4];
                        break;
                    case CwHdwAccountInfoBlockAmount:
                        cmd.cmdOutput = [NSData dataWithBytes: &accBlocAmount[accId] length:8];
                        break;
                }
            }

            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdHdwSetAccountInfo:
            //input:
            //P1: infoId: 1B
            //accountId: 4B
            //accountInfo
            //  accountName 32B
            //  balance 8B
            //  extKeyPointer   4B
            //  intKeyPointer   4B
            //mac 32B (of accountInfo)
            
            //output:
            //none
            {
                const unsigned char *data = [cmd.cmdInput bytes];
                
                NSInteger accId = *(int32_t *)data;

                NSLog(@"     P1=%ld", (long)cmd.cmdP1);
                switch (cmd.cmdP1) {
                    case CwHdwAccountInfoName:
                        memcpy(accName[accId], [cmd.cmdInput bytes]+4, 32);
                        break;
                    case CwHdwAccountInfoBalance:
                        accBalance[accId] = *(int64_t *)([cmd.cmdInput bytes]+4);
                        break;
                    case CwHdwAccountInfoExtKeyPtr:
                        accExtKeyPtr[accId] = *(int32_t *)([cmd.cmdInput bytes]+4);
                        break;
                    case CwHdwAccountInfoIntKeyPtr:
                        accIntKeyPtr[accId] = *(int32_t *)([cmd.cmdInput bytes]+4);
                        break;
                }
            }
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdHdwGetNextAddress:
            //input
            //P1: keyChainId 1B
            //accountId 4B
            {
                NSInteger kcId = cmd.cmdP1;
                const unsigned char *data = [cmd.cmdInput bytes];
                NSInteger accId = *(int32_t *)data;
                NSInteger kid;
                NSLog(@"     P1=%ld", (long)cmd.cmdP1);
                switch (kcId) {
                    case CwAddressKeyChainExternal:
                        kid = accExtKeyPtr[accId];
                        accExtKeyPtr[accId]=kid+1;
                        break;
                    case CwAddressKeyChainInternal:
                        kid = accIntKeyPtr[accId];
                        accIntKeyPtr[accId]=kid+1;
                        break;
                }
                
                //output
                //keyId 4B
                //address 25B
                //mac 32B (of keyId||address)
                memcpy(output, &kid, 4);
                for (int i=4; i<61; i++)
                    output[i]=kid;
                cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:61];
            }
            
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdHdwPrepTrxSign:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdHdwQueryAccountKeyInfo:
            //output
            //keyInfo
            //  address 25B
            //  publicKey 64B
            //mac 32B (of KeyInfo)
            NSLog(@"     P1=%ld", (long)cmd.cmdP1);
            switch (cmd.cmdP1) {
                case CwHdwAccountKeyInfoAddress:
                    for (int i=0; i<25+32; i++)
                        output[i]=i;
                    cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:25+32];
                    break;
                case CwHdwAccountKeyInfoPubKey:
                    for (int i=0; i<64+32; i++)
                        output[i]=i;
                    cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:64+32];
                    break;
            }
            cmd.cmdResult = 0x9000;
            break;
            
            //Transaction Commands
        case CwCmdIdTrxStatus:
            //output
            //status 1B (00 idle, 01 preparing, 02 begined, 03 opt veriried, 04 in process
            output[0]=0x00;
            
            cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:1];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdTrxBegin:
            //output
            //otp 6B
            for (int i=0; i<6; i++)
                output[i]='3'+i;
            
            cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:6];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdTrxVerifyOtp:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdTrxSign:
            //ouput
            //signature 64B
            //mac 32B (of signature)
            for (int i=0; i<96; i++)
                output[i]=i;
            
            cmd.cmdOutput = [[NSData alloc] initWithBytes:output length:96];
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdTrxFinish:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
            
        //MCU Commands
        case CwCmdIdMcuResetSe:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case CwCmdIdMcuQueryBatGague:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        
        //loader commands
        case LoaderCmdIdEcho:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case LoaderCmdIdGetSn:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case LoaderCmdIdGetVersion:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case LoaderCmdIdGetStatus:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case LoaderCmdIdBackToSLE97Loader:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case LoaderCmdIdLoadingBegin:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case LoaderCmdIdWriteRecord:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        case LoaderCmdIdVerifyMac:
            //output:
            //none
            cmd.cmdResult = 0x9000;
            break;
        default:
            break;
    }
}


@end
